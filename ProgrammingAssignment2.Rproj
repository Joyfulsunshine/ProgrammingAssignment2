Our goal in the experiment is to write a pair of functions, namely "makeCacheMatrix" and "cacheSolve" that cache the inverse of a matrix.

makeCacheMatrix is a function which creates a special "matrix" object that can cache its inverse for the input (an invertible square matrix)

library(MASS)
makecachematrix<-function(x=matrix()){
inv<-NULL 
set<-function(y){
  x<<-y 
  inv<<-NULL
}
get<-function()x
setinv<-function(inverse)inv<<-inverse
getinv<<-function(){
  inver<-ginv(x)
inver%*%x
}
list(set=set, get=get, 
     setinv=setinv, 
     getinv=getinv)
}

cacheSolve is a function which computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated 
and the matrix has not changed, thus the cachesolve can retrieve the inverse from the cache.

cachesolve<-function(x,...)
  {
  inv<-x$getinv()
  if(!is.null(inv)){
    message("getting cached data!")
    return(inv)
  }
  data<-x$get()
  inv<-solve(data,...)
  x$setinv(inv)
  inv
}
Check the program
> f<-makecachematrix(matrix(1:8,2,4))
> f$get()
     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8
> f$getinv()
     [,1] [,2] [,3] [,4]
[1,]  0.7  0.4  0.1 -0.2
[2,]  0.4  0.3  0.2  0.1
[3,]  0.1  0.2  0.3  0.4
[4,] -0.2  0.1  0.4  0.7
> cachesolve(f)
getting cached data!
     [,1] [,2] [,3] [,4]
[1,]  0.7  0.4  0.1 -0.2
[2,]  0.4  0.3  0.2  0.1
[3,]  0.1  0.2  0.3  0.4
[4,] -0.2  0.1  0.4  0.7
